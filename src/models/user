const mongoose = require('mongoose')

const cities = ['Adana', 'Kocaeli', 'Adiyaman', 'Konya'
    , 'Afyonkarahisar', 'Kutahya'
    , 'Agri', 'Malatya'
    , 'Amasya', 'Manisa'
    , 'Ankara', 'Kahramanmaras'
    , 'Antalya', 'Mardin'
    , 'Artviin', 'Mugla'
    , 'Aydin', 'Mus'
    , 'Balikesir', 'Nevsehir'
    , 'Bilecik', 'Nigde'
    , 'Bingol', 'Ordu'
    , 'Bitlis', 'Rize'
    , 'Bolu', 'Sakarya'
    , 'Burdur', 'Samsun'
    , 'Bursa', 'Siirt'
    , 'Canakkale', 'Sinop'
    , 'Cankiri', 'Sivas'
    , 'Corum', 'Tekirdag'
    , 'Denizli', 'Tokat'
    , 'Diyarbakir', 'Trabzon'
    , 'Edirne', 'Tunceli'
    , 'Elazig', 'Sanliurfa'
    , 'Erzincan', 'Usak'
    , 'Erzurum', 'Van'
    , 'Eskisehir', 'Yozgat'
    , 'Gaziantep', 'Zonguldak'
    , 'Giresun', 'Aksaray'
    , 'Gumushane', 'Bayburt'
    , 'Hakkari', 'Karaman'
    , 'Hatay', 'Kirikkale'
    , 'Isparta', 'Batman'
    , 'Mersin', 'Sirnak'
    , 'Istanbul', 'Bartin'
    , 'Izmir', 'Ardahan'
    , 'Kars', 'Igdir'
    , 'Kastamonu', 'Yalova'
    , 'Kayseri', 'Karabuk'
    , 'Kirklareli', 'Kilis'
    , 'Kirsehir', 'Osmaniye'
    , 'Duzce'
]

const listOfCategories = ['No Poverty', 'Zero Hunger', 'Good Health And Well-Being',
    'Quality Education', 'Gender Equality', 'Clean Water And Sanitation',
    'Affordable And Clean Energy', 'Animals', 'Oceans', 'Nature',
    'Reduced Inequalities', 'Sustainable Cities And Communities', 'Responsible Consumption And Production',
    'Climate Action', 'Life Below Water', 'Life On Land', 'Peace', 'Youth', 'Justice']

const rate = mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true
    },
    rate: {
        type: number,
        enum: [1, 2, 3, 4, 5],
        required: true
    }
})

const baseUser = mongoose.Schema({
    email: {
        type: String,
        unique: true,
        required: true
    },
    hashedPassword: {
        type: String,
        required: true
    },
    provider: {
        type: String,
        enum: ['email', 'google', 'twitter'],
        default: 'email',
        required: true
    },
    providerId: {
        type: String,
    },
    isVerified: {
        type: Boolean,
        required: true
    },
    createdEvents: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Event",

    }],
    followers: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
    }],
    createdFunds: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Fund"
    }]

}, { toJSON: { virtuals: true } }, { toObject: { virtuals: true } });

const BaseUser = mongoose.model("User", baseUser);


const user = mongoose.Schema({

    firstName: {
        type: string,
        required: true
    },
    lastName: {
        type: string,
        required: true
    },
    // fullname: virtual property

    profileImage: {
        type: string,
    },
    dateOfBirth: {
        type: string,
        required: true
    },
    preferredCities: [{
        type: string,
        enum: cities
    }],

    interests: [{
        type: string,
        enum: listOfCategories,
        required: true
    }],
    gender: {
        type: string,
        enum: ['male', 'female', 'other']
    },
    followedEvents: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Event",

    }],
    followedFunds: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Fund",
    }],
    followedUsers: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
    }],
    followedOrganizations: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Organization",

    }]

}]



// virtual
user.virtual('fullName').get(function () {
    return this.firstName + ' ' + this.lastName;
});

const User = BaseUser.discriminator("User", user);




const organization = mongoose.Schema({
    name: {
        type: string,
        required: true
    },
    description: {
        type: string,
        required: true
    },
    coverImage: {
        type: string,
        required: true

    },
    categories: [{
        type: string,
        enum: listOfCategories
    }],
    city: {
        type: string,
        required: true

    },
    rates: [rate],
    // rate : virtual property
    websiteUrl: {
        type: string,
    }


});

// virtual
organization.virtual('rate').get(function () {
    if (!this.rates.length) return 0
    return this.rates.reduce((acc, curr) => acc + curr, 0) / this.rates.length
});

const Organization = BaseUser.discriminator("Organization", organization)





module.exports = {
    BaseUser, User, Organization
}